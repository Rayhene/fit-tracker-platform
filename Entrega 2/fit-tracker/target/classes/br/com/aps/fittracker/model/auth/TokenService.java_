package br.com.aps.fittracker.model.auth;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import java.util.Date;

@Service
public class TokenService {

    @Value("${app.jwtSecret}") // Defina a chave secreta no arquivo application.properties
    private String jwtSecret;

    @Value("${app.jwtExpirationMs}") // Defina o tempo de expiração do token no arquivo application.properties
    private long jwtExpirationMs;

    // Método para gerar o token JWT
    public String generateToken(UserDetails userDetails) {
        return Jwts.builder()
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMs))
                .signWith(SignatureAlgorithm.HS256, jwtSecret)
                .compact();
    }

    // Método para criar um cookie com o token JWT e enviar para o frontend
    public void addTokenToResponse(HttpServletResponse response, String token) {
        Cookie cookie = new Cookie("token", token);
        cookie.setPath("/"); // Defina o caminho no qual o cookie será válido, normalmente "/"
        cookie.setHttpOnly(true); // Impede que o cookie seja acessível por scripts no frontend
        cookie.setMaxAge((int) (jwtExpirationMs / 1000)); // Define a duração do cookie (em segundos)
        response.addCookie(cookie);
    }
}
